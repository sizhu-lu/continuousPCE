% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{point_estimator}
\alias{point_estimator}
\title{Point estimator for principal causal effects}
\usage{
point_estimator(
  Z,
  X,
  S,
  Y,
  n_divisions = 100,
  copula_type = "gaussian",
  rho = 0,
  weighting_function_vectorized = identity_weighting_function_vectorized,
  g_function_vectorized = identity_g_function_vectorized
)
}
\arguments{
\item{Z}{A numeric vector indicating the treatment assignment (1 for treatment,
0 for control).}

\item{X}{A matrix of covariates.}

\item{S}{A numeric vector representing the post-treatment variable.}

\item{Y}{A numeric vector of outcomes.}

\item{n_divisions}{Integer specifying the number of divisions for integration.
Default is 100.}

\item{copula_type}{A string indicating the type of copula to be used.
Default is 'gaussian'.}

\item{rho}{A numeric parameter for the copula, the correlation coefficient, default is 0.}

\item{weighting_function_vectorized}{A vectorized weighting function used in
the calculation of estimators. Default is `identity_weighting_function_vectorized`.}

\item{g_function_vectorized}{A vectorized g-function used in the calculation of
estimators. Default is `identity_g_function_vectorized`.}
}
\value{
A numeric vector of the point estimates for the projection coefficients.
The vector contains the differences between the estimators for eta1 and eta0, for eif, tp_pd, pd_om estimators
}
\description{
This function estimates principal causal effects using principal densities, treatment
probabilities, and outcome models. The method combines an efficient influence
function estimator (eif), a treatment probability plus principal density estimator (tp_pd), and a
principal density plus outcome modeling estimator (pd_om). The function integrates over possible
values of the post-treatment variable to compute point estimates for the coefficients eta1 and eta0.
}
\examples{
# Example usage
set.seed(42)
Z <- sample(0:1, 100, replace = TRUE)
X <- matrix(rnorm(100*3), ncol = 3)
S <- rnorm(100)
Y <- rnorm(100)
result <- point_estimator(Z, X, S, Y)
print(result)

}
